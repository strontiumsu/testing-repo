window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "repository", "modulename": "repository", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Classes", "modulename": "repository.Classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Classes.AWG", "modulename": "repository.Classes.AWG", "kind": "module", "doc": "<p>Created on Fri Aug 23 10:16:17 2024</p>\n\n<p>@author: ejporter</p>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator", "kind": "class", "doc": "<p>A class for generating custom waveform pulses for experiments using AWGs (Arbitrary Waveform Generators).</p>\n\n<p>This class provides methods for creating and managing square and Gaussian pulses,\nstoring them as arrays for further use in experiments.</p>\n\n<p>Class Variables:\n    max_amplitude (float): Maximum allowed amplitude for waveforms.\n    min_amplitude (float): Minimum allowed amplitude for waveforms.\n    default_sample_rate (float): Default sample rate in Hz.</p>\n\n<p><strong>Example Usage</strong>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">wg</span> <span class=\"o\">=</span> <span class=\"n\">WaveformGenerator</span><span class=\"p\">(</span><span class=\"n\">sample_rate</span><span class=\"o\">=</span><span class=\"mf\">1e6</span><span class=\"p\">)</span>\n<span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">add_square_pulse</span><span class=\"p\">(</span><span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">amplitude</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">wg</span><span class=\"o\">.</span><span class=\"n\">add_gaussian_pulse</span><span class=\"p\">(</span><span class=\"n\">start_time</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mf\">2e-3</span><span class=\"p\">,</span> <span class=\"n\">amplitude</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">std_dev</span><span class=\"o\">=</span><span class=\"mf\">5e-4</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.__init__", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.__init__", "kind": "function", "doc": "<p>Initialize the WaveformGenerator with a specified sampling rate.</p>\n\n<p>Args:\n    sample_rate (float): The sampling rate in samples per second.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample_rate</span><span class=\"o\">=</span><span class=\"mf\">10000000.0</span>, </span><span class=\"param\"><span class=\"n\">max_amplitude</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span></span>)</span>"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.sample_rate", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.sample_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.time_array", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.time_array", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.amplitude_array", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.amplitude_array", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.max_amplitude", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.max_amplitude", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.add_square_pulse", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.add_square_pulse", "kind": "function", "doc": "<p>Add a square pulse to the waveform.</p>\n\n<p>Args:\n    start_time (float): The starting time of the pulse in seconds.\n    duration (float): The duration of the pulse in seconds.\n    amplitude (float): The amplitude of the pulse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">duration</span>, </span><span class=\"param\"><span class=\"n\">amplitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.add_gaussian_pulse", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.add_gaussian_pulse", "kind": "function", "doc": "<p>Add a Gaussian pulse to the waveform.</p>\n\n<p>Args:\n    start_time (float): The starting time of the pulse in seconds.\n    duration (float): The duration of the pulse in seconds.\n    amplitude (float): The amplitude of the pulse.\n    std_dev (float): The standard deviation of the Gaussian pulse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_time</span>, </span><span class=\"param\"><span class=\"n\">duration</span>, </span><span class=\"param\"><span class=\"n\">amplitude</span>, </span><span class=\"param\"><span class=\"n\">std_dev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.plot_waveform", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.plot_waveform", "kind": "function", "doc": "<p>Plot the generated waveform using Matplotlib.</p>\n\n<p>This provides a visual representation of the time-domain waveform.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.reset_waveform", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.reset_waveform", "kind": "function", "doc": "<p>Clear the current waveform data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.save_waveform", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.save_waveform", "kind": "function", "doc": "<p>Save the waveform to a file.</p>\n\n<p>Args:\n    filename (str): The file path to save the waveform.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.AWG.WaveformGenerator.load_waveform", "modulename": "repository.Classes.AWG", "qualname": "WaveformGenerator.load_waveform", "kind": "function", "doc": "<p>Load a waveform from a file.</p>\n\n<p>Args:\n    filename (str): The file path to load the waveform from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.BraggClass", "modulename": "repository.Classes.BraggClass", "kind": "module", "doc": "<p>Created on Mon Feb 14 15:48:49 2022</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Classes.CameraClass", "modulename": "repository.Classes.CameraClass", "kind": "module", "doc": "<p>Created on Thu Feb  2 12:41:16 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Classes.CameraClass.fit2DGaussian", "modulename": "repository.Classes.CameraClass", "qualname": "fit2DGaussian", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">center_x</span>, </span><span class=\"param\"><span class=\"n\">center_y</span>, </span><span class=\"param\"><span class=\"n\">sigma_x_sq</span>, </span><span class=\"param\"><span class=\"n\">sigma_y_sq</span>, </span><span class=\"param\"><span class=\"n\">offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass", "modulename": "repository.Classes.CoolingClass", "kind": "module", "doc": "<p>Created on Mon Jan 30 18:16:29 2023</p>\n\n<p>@author: ejporter</p>\n\n<p>Desc: This file contains the class that controls all blue MOT  and red MOT methods (loading, MOT coils, eijtc.)</p>\n"}, {"fullname": "repository.Classes.CoolingClass.Cooling", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling", "kind": "class", "doc": "<p>Cooling class responsible for controlling and managing AOMs, MOT coils, and other hardware for cooling processes.</p>\n\n<p>Attributes:\n    AOMs (list): List of AOM identifiers used in the experiment.\n    scales (list): Scaling factors for each AOM.\n    attens (list): Attenuations for each AOM.\n    freqs (list): Frequencies for each AOM in MHz.\n    urukul_channels (list): List of Urukul device channels.\n    dac_0: DAC device for controlling MOT coil current.\n    bmot_ramp_duration (float): Ramp duration for the blue MOT coils in milliseconds.\n    bmot_current (float): Current for blue MOT coils in amperes.\n    ... (other attributes as necessary).</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Classes.CoolingClass.Cooling.build", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.build", "kind": "function", "doc": "<p>Initialize the Cooling class, setting up devices and default parameters for AOMs and MOT coils.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.prepare_aoms", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.prepare_aoms", "kind": "function", "doc": "<p>Prepare AOM parameters such as scale, attenuation, and frequency based on user-defined values.</p>\n\n<p>This method initializes the scales, attenuations, and frequencies for the AOMs used in the experiment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.init_aoms", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.init_aoms", "kind": "function", "doc": "<p>Initialize AOMs by setting their frequency, scale, and attenuation. Optionally turn them on or off.</p>\n\n<p>Args:\n    on (bool): If True, turn the AOMs on. If False, turn them off.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.init_ttls", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.init_ttls", "kind": "function", "doc": "<p>Initialize TTL outputs for controlling various devices in the setup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.AOMs_on", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.AOMs_on", "kind": "function", "doc": "<p>Turn specified AOMs on via RF switches.</p>\n\n<p>Args:\n    AOMs (list): List of AOM names to be turned on.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">AOMs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.AOMs_off", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.AOMs_off", "kind": "function", "doc": "<p>Turn specified AOMs off via RF switches.</p>\n\n<p>Args:\n    AOMs (list): List of AOM names to be turned off.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">AOMs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.set_AOM_freqs", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.set_AOM_freqs", "kind": "function", "doc": "<p>Update frequencies for specified AOMs.</p>\n\n<p>Args:\n    freq_list (list): List of tuples where each tuple contains the AOM name and the new frequency.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">freq_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.set_AOM_attens", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.set_AOM_attens", "kind": "function", "doc": "<p>Update scales for specified AOMs.</p>\n\n<p>Args:\n    scale_list (list): List of tuples where each tuple contains the AOM name and the new scale value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">atten_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.set_AOM_scales", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.set_AOM_scales", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scale_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.atom_source_on", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.atom_source_on", "kind": "function", "doc": "<p>Turn on the atom source by activating the relevant TTL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.atom_source_off", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.atom_source_off", "kind": "function", "doc": "<p>Turn off the atom source by deactivating the relevant TTL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.prepare_coils", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.prepare_coils", "kind": "function", "doc": "<p>Prepare parameters for coil operation, including ramp duration and current settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.init_coils", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.init_coils", "kind": "function", "doc": "<p>Initialize the MOT coils by configuring the DAC and setting the initial state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.coils_off", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.coils_off", "kind": "function", "doc": "<p>Turn off the coils by setting the current to zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.set_current", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.set_current", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cur</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.set_current_dir", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.set_current_dir", "kind": "function", "doc": "<p>Set the direction of the current in the MOT coils.</p>\n\n<p>Args:\n    direc (int): Direction indicator (0 or +1).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">direc</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.Blackman_ramp_up", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.Blackman_ramp_up", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cur</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.Blackman_ramp_down", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.Blackman_ramp_down", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cur</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.linear_ramp_down_capture", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.linear_ramp_down_capture", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.linear_ramp", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.linear_ramp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bottom</span>, </span><span class=\"param\"><span class=\"n\">top</span>, </span><span class=\"param\"><span class=\"n\">time</span>, </span><span class=\"param\"><span class=\"n\">Npoints</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.dac_set", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.dac_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ch</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.hold", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.hold", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.bMOT_pulse", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.bMOT_pulse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.bMOT_load", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.bMOT_load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.rMOT_pulse", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.rMOT_pulse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sf</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.take_background_image_exp", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.take_background_image_exp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cam</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.take_MOT_image", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.take_MOT_image", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cam</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.push", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.push", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.CoolingClass.Cooling.index_artiq", "modulename": "repository.Classes.CoolingClass", "qualname": "Cooling.index_artiq", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">aom</span></span><span class=\"return-annotation\">) -> <span class=\"n\">artiq</span><span class=\"o\">.</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">TMono</span><span class=\"p\">(</span><span class=\"s1\">&#39;int&#39;</span><span class=\"p\">,</span> <span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">,</span> <span class=\"n\">artiq</span><span class=\"o\">.</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">TValue</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))]))</span>:</span></span>", "funcdef": "def"}, {"fullname": "repository.Classes.ThreePhotonClass", "modulename": "repository.Classes.ThreePhotonClass", "kind": "module", "doc": "<p>Created on Mon Jan 30 18:16:29 2023</p>\n\n<p>@author: sr</p>\n\n<p>Desc: This file contains the class that controls all 698 aoms and methods for 3v experiment (loading, ect.)</p>\n"}, {"fullname": "repository.Experiments", "modulename": "repository.Experiments", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.BlueMOT", "modulename": "repository.Experiments.BlueMOT", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_DC", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_DC", "kind": "module", "doc": "<p>Created on Tue Jan 31 10:03:56 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_DC.Blue_MOT_DC_exp", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_DC", "qualname": "Blue_MOT_DC_exp", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_DC.Blue_MOT_DC_exp.build", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_DC", "qualname": "Blue_MOT_DC_exp.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_DC.Blue_MOT_DC_exp.prepare", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_DC", "qualname": "Blue_MOT_DC_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_DC.Blue_MOT_DC_exp.run", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_DC", "qualname": "Blue_MOT_DC_exp.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "kind": "module", "doc": "<p>Created on Tue Jan 31 10:03:56 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_pulse.Blue_MOT_pulse_exp", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "qualname": "Blue_MOT_pulse_exp", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_pulse.Blue_MOT_pulse_exp.build", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "qualname": "Blue_MOT_pulse_exp.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_pulse.Blue_MOT_pulse_exp.prepare", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "qualname": "Blue_MOT_pulse_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.BlueMOT.Blue_MOT_pulse.Blue_MOT_pulse_exp.run", "modulename": "repository.Experiments.BlueMOT.Blue_MOT_pulse", "qualname": "Blue_MOT_pulse_exp.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.DipoleTrap", "modulename": "repository.Experiments.DipoleTrap", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "kind": "module", "doc": "<p>Created on Mon Oct  2 14:01:03 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting.TractorBeamTesting", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "qualname": "TractorBeamTesting", "kind": "class", "doc": "<p>Extension of the <code>~scan_framework.scans.scan.Scan</code> class for 1D scans.  All 1D scans should inherit from\nthis class.</p>\n", "bases": "scan_framework.scans.scan.Scan1D, scan_framework.scans.extensions.TimeScan, artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting.TractorBeamTesting.build", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "qualname": "TractorBeamTesting.build", "kind": "function", "doc": "<p>Interface method (optional, has default behavior)</p>\n\n<p>Creates the :code:<code>scheduler</code> and :code:<code>core</code> devices and sets them to the attributes\n:code:<code>self.scheduler</code> and :code:<code>self.core</code> respectively.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Optional dictionary of class attributes when using the scan as a sub-component (i.e. the\nscan does not inherit from :code:<code>EnvExperiment</code>).  Each entry will be set as an attribute of the scan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting.TractorBeamTesting.prepare", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "qualname": "TractorBeamTesting.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting.TractorBeamTesting.before_scan", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "qualname": "TractorBeamTesting.before_scan", "kind": "function", "doc": "<p>User callback</p>\n\n<p>Run during initialization before datsets are initialized.</p>\n\n<p>Notes\n    - always runs on the host\n    - called after the 'prepare_scan' callback</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.DipoleTrap.TractorBeamTesting.TractorBeamTesting.measure", "modulename": "repository.Experiments.DipoleTrap.TractorBeamTesting", "qualname": "TractorBeamTesting.measure", "kind": "function", "doc": "<p>Interface method  (required)</p>\n\n<p>Performs a single measurement and returns the result of the measurement as an integer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>point</strong>:  Current scan point value\n:returns: The result of a single measurement</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples", "modulename": "repository.Experiments.Examples", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.Examples.Analog_IO", "modulename": "repository.Experiments.Examples.Analog_IO", "kind": "module", "doc": "<p>Created on Fri Apr  9 14:09:47 2021</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.Analog_IO.Analog_IO", "modulename": "repository.Experiments.Examples.Analog_IO", "qualname": "Analog_IO", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.Analog_IO.Analog_IO.build", "modulename": "repository.Experiments.Examples.Analog_IO", "qualname": "Analog_IO.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.Analog_IO.Analog_IO.prepare", "modulename": "repository.Experiments.Examples.Analog_IO", "qualname": "Analog_IO.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.Analog_IO.Analog_IO.run", "modulename": "repository.Experiments.Examples.Analog_IO", "qualname": "Analog_IO.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino", "modulename": "repository.Experiments.Examples.DMA_Zotino", "kind": "module", "doc": "<p>Created on Thu Jul  7 22:42:28 2022</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino.DMA_zotino", "modulename": "repository.Experiments.Examples.DMA_Zotino", "qualname": "DMA_zotino", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino.DMA_zotino.build", "modulename": "repository.Experiments.Examples.DMA_Zotino", "qualname": "DMA_zotino.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino.DMA_zotino.prepare", "modulename": "repository.Experiments.Examples.DMA_Zotino", "qualname": "DMA_zotino.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino.DMA_zotino.record", "modulename": "repository.Experiments.Examples.DMA_Zotino", "qualname": "DMA_zotino.record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.DMA_Zotino.DMA_zotino.run", "modulename": "repository.Experiments.Examples.DMA_Zotino", "qualname": "DMA_zotino.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.PulseTesting", "modulename": "repository.Experiments.Examples.PulseTesting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.Examples.PulseTesting.PulseTesting", "modulename": "repository.Experiments.Examples.PulseTesting", "qualname": "PulseTesting", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.PulseTesting.PulseTesting.build", "modulename": "repository.Experiments.Examples.PulseTesting", "qualname": "PulseTesting.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.PulseTesting.PulseTesting.run", "modulename": "repository.Experiments.Examples.PulseTesting", "qualname": "PulseTesting.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.Set_Analog_IO", "modulename": "repository.Experiments.Examples.Set_Analog_IO", "kind": "module", "doc": "<p>Created on Mon May 10 20:48:14 2021</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.Set_Analog_IO.Set_Analog_IO", "modulename": "repository.Experiments.Examples.Set_Analog_IO", "qualname": "Set_Analog_IO", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.Set_Analog_IO.Set_Analog_IO.build", "modulename": "repository.Experiments.Examples.Set_Analog_IO", "qualname": "Set_Analog_IO.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.Set_Analog_IO.Set_Analog_IO.run", "modulename": "repository.Experiments.Examples.Set_Analog_IO", "qualname": "Set_Analog_IO.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulPulse", "modulename": "repository.Experiments.Examples.UrukulPulse", "kind": "module", "doc": "<p>Created on Tue Jun 20 08:48:52 2023</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.UrukulPulse.UrukulPulse", "modulename": "repository.Experiments.Examples.UrukulPulse", "qualname": "UrukulPulse", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.UrukulPulse.UrukulPulse.build", "modulename": "repository.Experiments.Examples.UrukulPulse", "qualname": "UrukulPulse.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulPulse.UrukulPulse.run", "modulename": "repository.Experiments.Examples.UrukulPulse", "qualname": "UrukulPulse.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulSet", "modulename": "repository.Experiments.Examples.UrukulSet", "kind": "module", "doc": "<p>Created on Tue Jun 20 08:48:52 2023</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.UrukulSet.UrukulSet", "modulename": "repository.Experiments.Examples.UrukulSet", "qualname": "UrukulSet", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.UrukulSet.UrukulSet.build", "modulename": "repository.Experiments.Examples.UrukulSet", "qualname": "UrukulSet.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulSet.UrukulSet.run", "modulename": "repository.Experiments.Examples.UrukulSet", "qualname": "UrukulSet.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulSync", "modulename": "repository.Experiments.Examples.UrukulSync", "kind": "module", "doc": "<p>Created on Sat Jul 16 13:17:12 2022</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.Examples.UrukulSync.UrukulSync", "modulename": "repository.Experiments.Examples.UrukulSync", "qualname": "UrukulSync", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Examples.UrukulSync.UrukulSync.build", "modulename": "repository.Experiments.Examples.UrukulSync", "qualname": "UrukulSync.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Examples.UrukulSync.UrukulSync.run", "modulename": "repository.Experiments.Examples.UrukulSync", "qualname": "UrukulSync.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Exps", "modulename": "repository.Experiments.Exps", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.Exps.MOT_temperature", "modulename": "repository.Experiments.Exps.MOT_temperature", "kind": "module", "doc": "<p>Created on Tue Feb  7 11:48:20 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp", "kind": "class", "doc": "<p>Extension of the <code>~scan_framework.scans.scan.Scan</code> class for 1D scans.  All 1D scans should inherit from\nthis class.</p>\n", "bases": "scan_framework.scans.scan.Scan1D, scan_framework.scans.extensions.TimeScan, artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp.build", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp.build", "kind": "function", "doc": "<p>Interface method (optional, has default behavior)</p>\n\n<p>Creates the :code:<code>scheduler</code> and :code:<code>core</code> devices and sets them to the attributes\n:code:<code>self.scheduler</code> and :code:<code>self.core</code> respectively.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Optional dictionary of class attributes when using the scan as a sub-component (i.e. the\nscan does not inherit from :code:<code>EnvExperiment</code>).  Each entry will be set as an attribute of the scan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp.prepare", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp.before_scan", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp.before_scan", "kind": "function", "doc": "<p>User callback</p>\n\n<p>Run during initialization before datsets are initialized.</p>\n\n<p>Notes\n    - always runs on the host\n    - called after the 'prepare_scan' callback</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp.measure", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp.measure", "kind": "function", "doc": "<p>Interface method  (required)</p>\n\n<p>Performs a single measurement and returns the result of the measurement as an integer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>point</strong>:  Current scan point value\n:returns: The result of a single measurement</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.Exps.MOT_temperature.Temperature_scan_exp.after_fit", "modulename": "repository.Experiments.Exps.MOT_temperature", "qualname": "Temperature_scan_exp.after_fit", "kind": "function", "doc": "<p>User callback</p>\n\n<p>Runs on the host after each registered fit model (i.e. all models registered with\n:code:<code>self.register_model(..., fit='&lt;fit name'&gt;</code>) has performed it's fit.</p>\n\n<p>Notes\n    - :code:<code>model.fit</code> is used in this callback to access the\n      <code>Fit &lt;scan_framework.analysis.curvefits.Fit&gt;</code> object containing the fitted parameters and other\n      useful information about the fit.\n    - Always runs on the host.\n    - Will not run if fit's are not performed for any reason</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit_name: The name of the fit passed in on the :code:<code>fit</code> argument of :code</strong>: <code>register_model()</code></li>\n<li><strong>valid</strong>:  False if any fit validation errors were raised during fitting.</li>\n<li><strong>saved: True if the :code</strong>: <code>main_fit</code> fit parameter was saved to the model's top level namespace.\n(a.k.a fits were saved)</li>\n<li><strong>model</strong>:  Instance of the registered fit model.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit_name</span>, </span><span class=\"param\"><span class=\"n\">valid</span>, </span><span class=\"param\"><span class=\"n\">saved</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT", "modulename": "repository.Experiments.RedMOT", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.RedMOT.Cavity_Scan_exp", "modulename": "repository.Experiments.RedMOT.Cavity_Scan_exp", "kind": "module", "doc": "<p>Created on Thu Feb  2 11:17:41 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.RedMOT.Cavity_Scan_exp.Cavity_Scan_exp", "modulename": "repository.Experiments.RedMOT.Cavity_Scan_exp", "qualname": "Cavity_Scan_exp", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.RedMOT.Cavity_Scan_exp.Cavity_Scan_exp.build", "modulename": "repository.Experiments.RedMOT.Cavity_Scan_exp", "qualname": "Cavity_Scan_exp.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT.Cavity_Scan_exp.Cavity_Scan_exp.prepare", "modulename": "repository.Experiments.RedMOT.Cavity_Scan_exp", "qualname": "Cavity_Scan_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT.Cavity_Scan_exp.Cavity_Scan_exp.run", "modulename": "repository.Experiments.RedMOT.Cavity_Scan_exp", "qualname": "Cavity_Scan_exp.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT.Red_MOT_pulse", "modulename": "repository.Experiments.RedMOT.Red_MOT_pulse", "kind": "module", "doc": "<p>Created on Thu Feb  2 11:17:41 2023</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.Experiments.RedMOT.Red_MOT_pulse.Red_MOT_pulse_exp", "modulename": "repository.Experiments.RedMOT.Red_MOT_pulse", "qualname": "Red_MOT_pulse_exp", "kind": "class", "doc": "<p>Red_MOT_pulse_exp\nThis experiment uses the CoolingClass to control the relevant AOMs and MOT\ncoils to pulse the Red MOT off and on, taking an image each time to display to the user\nat detection.images.current_image.</p>\n\n<p>parameters:\n    <all parameters inherited from CoolingClass>\n    <all parameters inherited from Detection2>\n    pulses: number of times to pulse the red MOT\n    wait_time: how long to wait between pulses</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.RedMOT.Red_MOT_pulse.Red_MOT_pulse_exp.build", "modulename": "repository.Experiments.RedMOT.Red_MOT_pulse", "qualname": "Red_MOT_pulse_exp.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT.Red_MOT_pulse.Red_MOT_pulse_exp.prepare", "modulename": "repository.Experiments.RedMOT.Red_MOT_pulse", "qualname": "Red_MOT_pulse_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.RedMOT.Red_MOT_pulse.Red_MOT_pulse_exp.run", "modulename": "repository.Experiments.RedMOT.Red_MOT_pulse", "qualname": "Red_MOT_pulse_exp.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.ThreePhoton", "modulename": "repository.Experiments.ThreePhoton", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.ThreePhoton.Three_photon_689_set", "modulename": "repository.Experiments.ThreePhoton.Three_photon_689_set", "kind": "module", "doc": "<p>Created on Sat Jul  9 12:04:05 2022</p>\n\n<p>@author: sr</p>\n"}, {"fullname": "repository.Experiments.ThreePhoton.Three_photon_689_set.Three_photon_689_set", "modulename": "repository.Experiments.ThreePhoton.Three_photon_689_set", "qualname": "Three_photon_689_set", "kind": "class", "doc": "<p>Base class for top-level experiments that use the\n<code>~artiq.language.environment.HasEnvironment</code> environment manager.</p>\n\n<p>Most experiments should derive from this class.</p>\n", "bases": "artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.ThreePhoton.Three_photon_689_set.Three_photon_689_set.build", "modulename": "repository.Experiments.ThreePhoton.Three_photon_689_set", "qualname": "Three_photon_689_set.build", "kind": "function", "doc": "<p>Should be implemented by the user to request arguments.</p>\n\n<p>Other initialization steps such as requesting devices may also be\nperformed here.</p>\n\n<p>There are two situations where the requested devices are replaced by\n<code>DummyDevice()</code> and arguments are set to their defaults (or <code>None</code>)\ninstead: when the repository is scanned to build the list of\navailable experiments and when the dataset browser <code>artiq_browser</code>\nis used to open or run the analysis stage of an experiment. Do not\nrely on being able to operate on devices or arguments in <code>build()</code>.</p>\n\n<p>Datasets are read-only in this method.</p>\n\n<p>Leftover positional and keyword arguments from the constructor are\nforwarded to this method. This is intended for experiments that are\nonly meant to be executed programmatically (not from the GUI).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.ThreePhoton.Three_photon_689_set.Three_photon_689_set.prepare", "modulename": "repository.Experiments.ThreePhoton.Three_photon_689_set", "qualname": "Three_photon_689_set.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.ThreePhoton.Three_photon_689_set.Three_photon_689_set.run", "modulename": "repository.Experiments.ThreePhoton.Three_photon_689_set", "qualname": "Three_photon_689_set.run", "kind": "function", "doc": "<p>The main entry point of the experiment.</p>\n\n<p>This method must be overloaded by the user to implement the main\ncontrol flow of the experiment.</p>\n\n<p>This method may interact with the hardware.</p>\n\n<p>The experiment may call the scheduler's <code>pause()</code> method while in\n<code>run()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS", "modulename": "repository.Experiments.VRS", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "kind": "module", "doc": "<p>Created on Mon Nov  4 11:01:45 2024</p>\n\n<p>@author: ejporter</p>\n"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp", "kind": "class", "doc": "<p>Extension of the <code>~scan_framework.scans.scan.Scan</code> class for 1D scans.  All 1D scans should inherit from\nthis class.</p>\n", "bases": "scan_framework.scans.scan.Scan1D, scan_framework.scans.extensions.TimeScan, artiq.language.environment.EnvExperiment"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.build", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.build", "kind": "function", "doc": "<p>Interface method (optional, has default behavior)</p>\n\n<p>Creates the :code:<code>scheduler</code> and :code:<code>core</code> devices and sets them to the attributes\n:code:<code>self.scheduler</code> and :code:<code>self.core</code> respectively.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Optional dictionary of class attributes when using the scan as a sub-component (i.e. the\nscan does not inherit from :code:<code>EnvExperiment</code>).  Each entry will be set as an attribute of the scan.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.prepare", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.prepare", "kind": "function", "doc": "<p>This default prepare method calls <code>~artiq.language.environment.Experiment.prepare()</code>\nfor all children, in the order of registration, if the child has a\n<code>~artiq.language.environment.Experiment.prepare()</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.load_scan", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.load_scan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.before_scan", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.before_scan", "kind": "function", "doc": "<p>User callback</p>\n\n<p>Run during initialization before datsets are initialized.</p>\n\n<p>Notes\n    - always runs on the host\n    - called after the 'prepare_scan' callback</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.measure", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.measure", "kind": "function", "doc": "<p>Interface method  (required)</p>\n\n<p>Performs a single measurement and returns the result of the measurement as an integer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>point</strong>:  Current scan point value\n:returns: The result of a single measurement</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.Experiments.VRS.VRS_sideband_scan.VRS_sideband_scan_exp.run_exp", "modulename": "repository.Experiments.VRS.VRS_sideband_scan", "qualname": "VRS_sideband_scan_exp.run_exp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delay_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models", "modulename": "repository.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models", "modulename": "repository.models.scan_models", "kind": "module", "doc": "<p>Created on Wed Dec 14 12:35:21 2022</p>\n\n<p>@author: E. Porter</p>\n"}, {"fullname": "repository.models.scan_models.MyModel", "modulename": "repository.models.scan_models", "qualname": "MyModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_freq_model.TimeFreqModel"}, {"fullname": "repository.models.scan_models.MyModel.namespace", "modulename": "repository.models.scan_models", "qualname": "MyModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;LorentzianTest.%transition&#x27;"}, {"fullname": "repository.models.scan_models.MyModel.y_label", "modulename": "repository.models.scan_models", "qualname": "MyModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Counts&#x27;"}, {"fullname": "repository.models.scan_models.MyModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "MyModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Frequency/Time Scan&#x27;"}, {"fullname": "repository.models.scan_models.MyModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "MyModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.MyModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "MyModel.fit_function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.MyModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "MyModel.main_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.MyModel.x_units", "modulename": "repository.models.scan_models", "qualname": "MyModel.x_units", "kind": "variable", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.x_label", "modulename": "repository.models.scan_models", "qualname": "MyModel.x_label", "kind": "variable", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.guess", "modulename": "repository.models.scan_models", "qualname": "MyModel.guess", "kind": "variable", "doc": "<p>dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.hold", "modulename": "repository.models.scan_models", "qualname": "MyModel.hold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.MyModel.man_bounds", "modulename": "repository.models.scan_models", "qualname": "MyModel.man_bounds", "kind": "variable", "doc": "<p>dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.man_scale", "modulename": "repository.models.scan_models", "qualname": "MyModel.man_scale", "kind": "variable", "doc": "<p>dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.before_validate", "modulename": "repository.models.scan_models", "qualname": "MyModel.before_validate", "kind": "function", "doc": "<p>User callback (runs on host).</p>\n\n<p>Executed after a fit was successfully performed by the scan model, but before\nfits are validated or saved to the datasets.  This callback allows additional fit parameters\nto be calculated from the parameters of the fit function.  e.g. calculating a pi time from\na transition rate.  Any calculated fit parameters will also be validated by any validation\nrules that are defined for name of the calculated parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit</strong>:  Fit object for the fit that was just performed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models.scan_models.MyModel.validators", "modulename": "repository.models.scan_models", "qualname": "MyModel.validators", "kind": "variable", "doc": "<p>dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)</p>\n"}, {"fullname": "repository.models.scan_models.MyModel.strong_validators", "modulename": "repository.models.scan_models", "qualname": "MyModel.strong_validators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.MyModel.pre_validators", "modulename": "repository.models.scan_models", "qualname": "MyModel.pre_validators", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.BlankModel", "modulename": "repository.models.scan_models", "qualname": "BlankModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.BlankModel.namespace", "modulename": "repository.models.scan_models", "qualname": "BlankModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.x_label", "modulename": "repository.models.scan_models", "qualname": "BlankModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.x_unit", "modulename": "repository.models.scan_models", "qualname": "BlankModel.x_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.y_label", "modulename": "repository.models.scan_models", "qualname": "BlankModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.y_unit", "modulename": "repository.models.scan_models", "qualname": "BlankModel.y_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27; &#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "BlankModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "repository.models.scan_models.BlankModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "BlankModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;&#x27;"}, {"fullname": "repository.models.scan_models.BlankModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "BlankModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.LoadingModel", "modulename": "repository.models.scan_models", "qualname": "LoadingModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.LoadingModel.namespace", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;LoadingExp&#x27;"}, {"fullname": "repository.models.scan_models.LoadingModel.y_label", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Counts&#x27;"}, {"fullname": "repository.models.scan_models.LoadingModel.x_label", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pulse time&#x27;"}, {"fullname": "repository.models.scan_models.LoadingModel.x_units", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;s&#x27;"}, {"fullname": "repository.models.scan_models.LoadingModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Loading Scan&#x27;"}, {"fullname": "repository.models.scan_models.LoadingModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.LoadingModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Exp&#x27;&gt;"}, {"fullname": "repository.models.scan_models.LoadingModel.man_bounds", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.man_bounds", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;A&#x27;: [-1000000, 0], &#x27;b&#x27;: [-5, 0], &#x27;y0&#x27;: [0, 1000000]}"}, {"fullname": "repository.models.scan_models.LoadingModel.guess", "modulename": "repository.models.scan_models", "qualname": "LoadingModel.guess", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;b&#x27;: -1}"}, {"fullname": "repository.models.scan_models.TemperatureModel", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.TemperatureModel.namespace", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TOF_temp&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.x_label", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TOF time&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.x_unit", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.x_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ms&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.y_label", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;variance&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.y_unit", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.y_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pixel squared&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.TemperatureModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Cloud Radius over time&#x27;"}, {"fullname": "repository.models.scan_models.TemperatureModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.TemperatureModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Power&#x27;&gt;"}, {"fullname": "repository.models.scan_models.TemperatureModel.hold", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.hold", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;alpha&#x27;: 2}"}, {"fullname": "repository.models.scan_models.TemperatureModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.main_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.TemperatureModel.before_validate", "modulename": "repository.models.scan_models", "qualname": "TemperatureModel.before_validate", "kind": "function", "doc": "<p>User callback (runs on host).</p>\n\n<p>Executed after a fit was successfully performed by the scan model, but before\nfits are validated or saved to the datasets.  This callback allows additional fit parameters\nto be calculated from the parameters of the fit function.  e.g. calculating a pi time from\na transition rate.  Any calculated fit parameters will also be validated by any validation\nrules that are defined for name of the calculated parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit</strong>:  Fit object for the fit that was just performed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.namespace", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;TimeOfFlight&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.x_label", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;drop time&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.x_unit", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.x_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ms&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.y_label", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;variance&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.y_unit", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.y_unit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pixel squared&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Cloud Size over time&#x27;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Power&#x27;&gt;"}, {"fullname": "repository.models.scan_models.DipoleTemperatureModel.hold", "modulename": "repository.models.scan_models", "qualname": "DipoleTemperatureModel.hold", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;alpha&#x27;: 2}"}, {"fullname": "repository.models.scan_models.RabiFlopModel", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.RabiFlopModel.namespace", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RabiFlopExp&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.y_label", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Transition Prob.&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RabiFlopModel.x_label", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Pulse Time&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.x_units", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ms&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Rabi Flop&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.ExpSine&#x27;&gt;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;f&#x27;"}, {"fullname": "repository.models.scan_models.RabiFlopModel.before_validate", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.before_validate", "kind": "function", "doc": "<p>User callback (runs on host).</p>\n\n<p>Executed after a fit was successfully performed by the scan model, but before\nfits are validated or saved to the datasets.  This callback allows additional fit parameters\nto be calculated from the parameters of the fit function.  e.g. calculating a pi time from\na transition rate.  Any calculated fit parameters will also be validated by any validation\nrules that are defined for name of the calculated parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit</strong>:  Fit object for the fit that was just performed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models.scan_models.RabiFlopModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "RabiFlopModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.RabiModel", "modulename": "repository.models.scan_models", "qualname": "RabiModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.RabiModel.namespace", "modulename": "repository.models.scan_models", "qualname": "RabiModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RabiFlopExp&#x27;"}, {"fullname": "repository.models.scan_models.RabiModel.y_label", "modulename": "repository.models.scan_models", "qualname": "RabiModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Transition Prob.&#x27;"}, {"fullname": "repository.models.scan_models.RabiModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "RabiModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RabiModel.x_label", "modulename": "repository.models.scan_models", "qualname": "RabiModel.x_label", "kind": "variable", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n"}, {"fullname": "repository.models.scan_models.RabiModel.x_units", "modulename": "repository.models.scan_models", "qualname": "RabiModel.x_units", "kind": "variable", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n"}, {"fullname": "repository.models.scan_models.RabiModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "RabiModel.plot_title", "kind": "variable", "doc": "<p>str(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str</p>\n\n<p>Create a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.__str__() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'.</p>\n"}, {"fullname": "repository.models.scan_models.RabiModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "RabiModel.fit_function", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "repository.models.scan_models.RabiModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "RabiModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;f&#x27;"}, {"fullname": "repository.models.scan_models.RabiModel.before_validate", "modulename": "repository.models.scan_models", "qualname": "RabiModel.before_validate", "kind": "function", "doc": "<p>User callback (runs on host).</p>\n\n<p>Executed after a fit was successfully performed by the scan model, but before\nfits are validated or saved to the datasets.  This callback allows additional fit parameters\nto be calculated from the parameters of the fit function.  e.g. calculating a pi time from\na transition rate.  Any calculated fit parameters will also be validated by any validation\nrules that are defined for name of the calculated parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit</strong>:  Fit object for the fit that was just performed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models.scan_models.RabiModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "RabiModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.RamseyModel", "modulename": "repository.models.scan_models", "qualname": "RamseyModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.RamseyModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RamseyModel.namespace", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RamseyScanExp&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.y_label", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Excite. Prob.&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.RamseyModel.x_label", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Delay Time&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.x_units", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;us&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Ramsey Delay Scan&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.ExpSine&#x27;&gt;"}, {"fullname": "repository.models.scan_models.RamseyModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;f&#x27;"}, {"fullname": "repository.models.scan_models.RamseyModel.persist", "modulename": "repository.models.scan_models", "qualname": "RamseyModel.persist", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.namespace", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RamseyPhaseScanExp&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.y_label", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Excite. Prob.&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.x_label", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Phase&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.x_units", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Turns&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Ramsey Phase Scan&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Sine&#x27;&gt;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;A&#x27;"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.hold", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.hold", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;f&#x27;: 1}"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.persist", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.persist", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RamseyPhaseModel.before_validate", "modulename": "repository.models.scan_models", "qualname": "RamseyPhaseModel.before_validate", "kind": "function", "doc": "<p>User callback (runs on host).</p>\n\n<p>Executed after a fit was successfully performed by the scan model, but before\nfits are validated or saved to the datasets.  This callback allows additional fit parameters\nto be calculated from the parameters of the fit function.  e.g. calculating a pi time from\na transition rate.  Any calculated fit parameters will also be validated by any validation\nrules that are defined for name of the calculated parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fit</strong>:  Fit object for the fit that was just performed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "repository.models.scan_models.RamseyDecayModel", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.namespace", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;RamseyDelayExp&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.y_label", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Contrast&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.x_label", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Delay Time&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.x_units", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;us&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Constrast Decay&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Exp&#x27;&gt;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;b&#x27;"}, {"fullname": "repository.models.scan_models.RamseyDecayModel.persist", "modulename": "repository.models.scan_models", "qualname": "RamseyDecayModel.persist", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.PicoModel", "modulename": "repository.models.scan_models", "qualname": "PicoModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.PicoModel.namespace", "modulename": "repository.models.scan_models", "qualname": "PicoModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PM2&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.y_label", "modulename": "repository.models.scan_models", "qualname": "PicoModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Transition prob (x10e6)&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "PicoModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.PicoModel.x_label", "modulename": "repository.models.scan_models", "qualname": "PicoModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor 2 Position&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.x_units", "modulename": "repository.models.scan_models", "qualname": "PicoModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;steps&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "PicoModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor Scan&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "PicoModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Gauss&#x27;&gt;"}, {"fullname": "repository.models.scan_models.PicoModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "PicoModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;x0&#x27;"}, {"fullname": "repository.models.scan_models.PicoModel.x_scale", "modulename": "repository.models.scan_models", "qualname": "PicoModel.x_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "repository.models.scan_models.PicoModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "PicoModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.FreqModelGen", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.freq_model.FreqModel"}, {"fullname": "repository.models.scan_models.FreqModelGen.namespace", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;FreqModel&#x27;"}, {"fullname": "repository.models.scan_models.FreqModelGen.y_label", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Transition prob.&#x27;"}, {"fullname": "repository.models.scan_models.FreqModelGen.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.FreqModelGen.x_label", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Frequency&#x27;"}, {"fullname": "repository.models.scan_models.FreqModelGen.x_units", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;MHz&#x27;"}, {"fullname": "repository.models.scan_models.FreqModelGen.plot_title", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Frequency Scan&#x27;"}, {"fullname": "repository.models.scan_models.FreqModelGen.fit_function", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Gauss&#x27;&gt;"}, {"fullname": "repository.models.scan_models.FreqModelGen.x_scale", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.x_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.FreqModelGen.y_scale", "modulename": "repository.models.scan_models", "qualname": "FreqModelGen.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "repository.models.scan_models.LinearModel", "modulename": "repository.models.scan_models", "qualname": "LinearModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.LinearModel.namespace", "modulename": "repository.models.scan_models", "qualname": "LinearModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PMCal&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.y_label", "modulename": "repository.models.scan_models", "qualname": "LinearModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor 2 Optimum&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.y_units", "modulename": "repository.models.scan_models", "qualname": "LinearModel.y_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;steps&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "LinearModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.LinearModel.x_label", "modulename": "repository.models.scan_models", "qualname": "LinearModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor 1 Position&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.x_units", "modulename": "repository.models.scan_models", "qualname": "LinearModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;steps&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "LinearModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor Calibration&#x27;"}, {"fullname": "repository.models.scan_models.LinearModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "LinearModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Poly&#x27;&gt;"}, {"fullname": "repository.models.scan_models.LinearModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "LinearModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "repository.models.scan_models.LinearModel.x_scale", "modulename": "repository.models.scan_models", "qualname": "LinearModel.x_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000"}, {"fullname": "repository.models.scan_models.PicoAngleModel", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.PicoAngleModel.namespace", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PMAngle&#x27;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.y_label", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Max Contrast Ratio&#x27;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.PicoAngleModel.x_label", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor 1 Position&#x27;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.x_scale", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.x_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "repository.models.scan_models.PicoAngleModel.x_units", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1e3 steps&#x27;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor Angle Scan&#x27;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Gauss&#x27;&gt;"}, {"fullname": "repository.models.scan_models.PicoAngleModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "repository.models.scan_models.PicoAngleModel.persist", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.persist", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.PicoAngleModel.hold", "modulename": "repository.models.scan_models", "qualname": "PicoAngleModel.hold", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;y0&#x27;: 0}"}, {"fullname": "repository.models.scan_models.PicoScanModel", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel", "kind": "class", "doc": "<p>An extension of the <code>~scan_framework.models.model.Model</code> class that handles initializing and mutating scan\ndatasets, calculating statistics on scan data, and performing fits on the scan data.  All scan models inherit from\nthis class.</p>\n\n<p><strong>Functions performed during a scan</strong></p>\n\n<p>The ScanModel class performs the following functions when a scan is run.</p>\n\n<ul>\n<li>Initializes all datasets for a scan.</li>\n<li>Mutates the dataset containing raw counts measured at each scan point.</li>\n<li>Calculates statistics (means, errors, histograms) at each scan point and mutates associated datasets.</li>\n<li>Performs a fit on the mean values using the <code>~scan_framework.analysis.curvefits</code> package and saves all data\ngenerated by the <code>~scan_framework.analysis.curvefits.Fit.fit_data()</code> method to datasets.</li>\n<li>All statistical and fit data are mirrored to the <code>current_scan</code> and <code>current_hist</code> namespaces.</li>\n<li>Gives a standardized way of fetching the main fit (e.g. pi_time or res_frequency of a transition)</li>\n</ul>\n\n<p><strong>Organization of datasets</strong></p>\n\n<p>Datasets are organized under the namespace by the following hierarchy.</p>\n\n<ul>\n<li><p><strong><namespace></strong>  All data is stored under this location which is specified in the child class.</p>\n\n<ul>\n<li><strong><namespace>.stats</strong> Contains statistical data, raw data from the scan, and the list of scan points.\n<ul>\n<li><strong><namespace>.points</strong> List of scan points.</li>\n<li><strong><namespace>.counts</strong> Raw counts recorded at each scan point and repetition.</li>\n<li><strong><namespace>.mean</strong> Mean count values calculated at each scan point.</li>\n<li><strong><namespace>.error</strong> Standard deviation of each mean value in the <namespace>.mean array.</li>\n<li><strong><namespace>.hist</strong> Binned mean values at each scan point.  Each entry is the histogram at the\ncorresponding scan point.</li>\n<li><strong><namespace>.bins</strong> Defines the bin boundaries for histograms.</li>\n<li><strong><namespace>.nbins</strong> The number of bins to use for histograms.</li>\n</ul></li>\n<li><strong><namespace>.fits:</strong> Contains all fit data\n<ul>\n<li><strong><namespace>.fits.params</strong> The value of each fitted parameter.</li>\n<li><strong><namespace>.fits.guesses</strong> The guess that was used for each fitted parameter.</li>\n<li><strong><namespace>.fits.errors</strong> The estimated error in each fitted parameter.</li>\n<li><strong><namespace>.fits.fitline</strong> The line of best fit to the data.</li>\n<li><strong><namespace>.fits.analysis</strong>  The standard error in the regression and coefficient of determination (R^2) values\nof the fit.</li>\n</ul></li>\n<li><strong><namespace>.plots:</strong> Contains all data necessary to plot the scan\n<ul>\n<li><strong><namespace>.plots.x:</strong> x data of the plot.</li>\n<li><strong><namespace>.plots.y:</strong> y data of the plot.</li>\n<li><strong><namespace>.plots.plot_title:</strong> Title of the plot.</li>\n<li><strong><namespace>.plots.x_label:</strong> Label of the x-axis.</li>\n<li><strong><namespace>.plots.y_label:</strong> Label of the y-axis.</li>\n<li><strong><namespace>.plots.x_units:</strong> Units to display on the x-axis.</li>\n<li><strong><namespace>.plots.y_units:</strong> Units to display on the y-axis.</li>\n<li><strong><namespace>.plots.x_scale:</strong> x-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.y_scale:</strong> y-axis is scaled by this amount.</li>\n<li><strong><namespace>.plots.trigger:</strong> Plots are redrawn by <code>~scan_framework.applets.plot_xy</code> only when trigger\nis set to 1.</li>\n<li><strong><namespace>.plots.fitline:</strong> The line of best fit.</li>\n</ul></li>\n<li><p><strong><namespace>.%main_fit</strong>\nContains the main fitted parameter of the scan.  <code>%main_fit</code> is replaced by the value of\nthe models 'main_fit' attribute  (see dynamic namespaces below).  For example, a microwave frequency scan\nmight have 'main_fit' set to <code>frequency</code> and the fitted frequency would be saved to <code>microwaves.3322.frequency</code>.</p></li>\n<li><p><strong><namespace>.defaults:</strong>\nContains default values for the main fit which are used when a fitted value does not exist.</p></li>\n</ul></li>\n<li><p><strong>current_scan:</strong>  Namespace under which a mirror of all data generated is stored.  This is used by the current_scan\napplet to display results of the current scan.</p></li>\n</ul>\n\n<p><strong>Dynamic namespace syntax</strong></p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ScanModel</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;raman.%transition.%type&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">transition</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;m1_rsb&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;frequency&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">)</span>  <span class=\"c1\"># prints &#39;raman.m1_rsb.frequency&#39;</span>\n</code></pre>\n</div>\n\n<p>%transition and %type are tokens that name an attribute of the model.  After calling self.bind() on the model, the\n%transition and %type tokens are replaced by self.transition and self.type and the final namespace is\n\"raman.m1_rsb.frequency\".  All future datasets will be stored and accessed under the 'raman.m1_rsb.frequency' namespace.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>namespace</strong>:  Dataset key under which all datasets are created, defaults to None</li>\n<li><strong>mirror_namespace</strong>:  Dataset key under which all datasets are mirrored -- datasets under this key are plotted by the current scan applet, defaults to 'current_scan'</li>\n<li><strong>broadcast</strong>:  If True all datasets besides the main fit dataset are broadcast when created, defaults to False</li>\n<li><strong>persist</strong>:  If True all datasets besides the main fit dataset are persisted, defaults to False</li>\n<li><strong>save</strong>:  If True all datasets besides the main fit dataset are archived to the hdf5 file, defaults to True</li>\n<li><p><strong>mirror</strong>:  If False datasets will not be mirrored to the mirror_namespace, default to True</p></li>\n<li><p><strong>enable_histograms</strong>:  If True, histogram data is generated for plotting by the current scan histogram applet -- this applet displays a histogram of the data collected at each scan point, defaults to True</p></li>\n<li><strong>aggregate_histogram</strong>:  If True, histogram data is generated for plotting by the current scan aggregate histogram applet -- this applet displays a histogram of all data collected, aggregated over all scan points, defaults to True</li>\n<li><p><strong>disable_validations</strong>:  If True, no fit validatons will be performed, fits will always be performed and no fit param values will be validated, defaults to False</p></li>\n<li><p><strong>fit_map</strong>:  Dictionary of fit param names to dataset name mappings.  Fit params are renamed according to this mapping before the fit is saved to the datasets.  Keys specify to a fit param name and the corresponding value in the dictionary specifies the dataset name.  Defaluts to {}</p></li>\n<li><strong>fit_function</strong>:  Specifies the fit function that will be used during fitting.  Defaults to None</li>\n<li><strong>fit_use_yerr</strong>:  If set to True a weighted fit will be performed using the calculated error in the measurued value at each scan point (by default this is the standard error of the mean value at each scan point). Defaults to True.</li>\n<li><strong>guess</strong>:  Dictionary containing initial guesses for the fit params.  Keys specify fit params and the corresponding value gives the numerical guess.  Defaults to {}</li>\n<li><strong>man_bounds</strong>:  Dictionary containing manual bounds for each fit param.  Keys specify fit params and the corresponding value is a list specifying the bounds -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>man_scale</strong>:  Dictionary containing manual scales for each fit param.  Keys specify fit params and the corresponding value is a float specifying the scale -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details.  Defaults to {}</li>\n<li><strong>hold</strong>:  Dictionary containing held values for each fit param.  Keys specify fit params and the corresponding value is a float specifying the held fit param value -- see <code>scan_framework.analysis.curvefits.Fit</code> for more details, defaults to None</li>\n<li><strong>main_fit</strong>:  Dataset name for the main fit param -- this name is automatically prefixed by self.namespace to give the full dataset name.  Defaults to None</li>\n<li><p><strong>fits_to_save</strong>:  Any fit param specified in this dictionary will broadcast, persisted, and saved to the datasets.  The format of this dictionary is the same as fit_map, with keys specifying fit param names and values specifiying the corresponding dataset name.  Defaults to {}</p></li>\n<li><p><strong>validators</strong>:  Dictionary containing validation rules of all soft fit validations that will be performed, defaults to None</p></li>\n<li><strong>strong_validators</strong>:  Dictionary containing validation rules of all strong fit validations that will be performed, defaults to None</li>\n<li><p><strong>pre_validators</strong>:  Dictionary containing validation rules of all all pre-fit validations validations that will be performed, defaults to None</p></li>\n<li><p><strong>fit_performed</strong>:  Set to true by the Scan class if fit's have been performed, defaults to None</p></li>\n<li><strong>fit_valid</strong>:  Set to True by the Scan class if the fit passed validations, False if it failed any validations, None if validations haven't been performed.  Default to None</li>\n<li><strong>fit_valid_pre</strong>:  Set to True by the Scan class if the fit passed pre-validation, False if it falied, None if pre-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_soft</strong>:  Set to True by the Scan class if the fit passed soft-validation, False if it falied, None if soft-validation has not yet been performed.  Defaults to None</li>\n<li><strong>fit_valid_strong</strong>:  Set to True by the Scan class if the fit passed strong-validation, False if it falied, None if strong-validation has not yet been performed.  Defaults to None</li>\n<li><strong>_fit_saved</strong>:  Set to True by the Scan class after the main fit has been broadcast, saved, and persisted to the datasets.  Defaults to None</li>\n<li><strong>fits_set</strong>:  Dictionary of fit params that were set to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</li>\n<li><p><strong>fits_saved</strong>:  Dictionary of fit params that were broadcast, persisted, and saved to the datasets during fitting -- keys specify the full dataset key and the corresponding value is set to the fitted parameter value, defaults to {}</p></li>\n<li><p><strong>x_label</strong>:  Label of the x-axis for the current scan plot, defaults to \"\"</p></li>\n<li><strong>y_label</strong>:  Label of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>x_scale</strong>:  Scale of the x-axis for the current scan plot, defaults to 1</li>\n<li><strong>y_scale</strong>:  Scale of the y-axis for the current scan plot, defaults to 1</li>\n<li><strong>x_units</strong>:  Unit of the x-axis for the current scan plot, defaults to \"\"</li>\n<li><strong>y_units</strong>:  Unit of the y-axis for the current scan plot, defaults to \"\"</li>\n<li><p><strong>plot_title</strong>:  Title of the current scan plot, defaults to \"\"</p></li>\n<li><p><strong>counts</strong>:  Contains the value returned by each call to the Scan measure method() -- contains a value for each scan point, repeat, and pass.</p></li>\n</ul>\n", "bases": "scan_framework.models.time_model.TimeModel"}, {"fullname": "repository.models.scan_models.PicoScanModel.namespace", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.namespace", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PMAngle_Compensation&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.y_label", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.y_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Contrast Ratio&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.y_scale", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.y_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000000.0"}, {"fullname": "repository.models.scan_models.PicoScanModel.enable_histograms", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.enable_histograms", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "repository.models.scan_models.PicoScanModel.x_label", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.x_label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor 2 Position&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.x_scale", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.x_scale", "kind": "variable", "doc": "<p></p>\n", "default_value": "1000.0"}, {"fullname": "repository.models.scan_models.PicoScanModel.x_units", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.x_units", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;1e3 steps&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.main_fit", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.main_fit", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;A&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.plot_title", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.plot_title", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Picomotor Angle Compensation Scan&#x27;"}, {"fullname": "repository.models.scan_models.PicoScanModel.fit_function", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.fit_function", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;scan_framework.analysis.curvefits.Gauss&#x27;&gt;"}, {"fullname": "repository.models.scan_models.PicoScanModel.hold", "modulename": "repository.models.scan_models", "qualname": "PicoScanModel.hold", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;y0&#x27;: 0}"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();